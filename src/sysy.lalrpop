use crate::frontend::ast::*;

grammar;

// Blanks and Comments
match {
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^\*]|\*+[^\*/])*\*+/" => {},
  _
}

pub CompUnit: CompUnit = <global_def: GlobalDef*> => CompUnit { <> };

GlobalDef: GlobalDef = {
  Decl => GlobalDef::Decl(<>),
  FuncDef => GlobalDef::FuncDef(<>),
}

Decl: Decl = {
  ConstDecl => Decl::ConstDecl(<>),
  VarDecl => Decl::VarDecl(<>),
}

ConstDecl: ConstDecl = {
  "const" "int" <def0: ConstDef> <mut constdef: ("," <ConstDef>)*> ";" => { 
    constdef.insert(0, def0);
    ConstDecl { item: constdef }
  }
}

ConstDef: ConstDef = {
  <ident: Ident> <dims: ("[" <ConstExp> "]")*> "=" <initial: ConstInitVal> => ConstDef { <> }
}

ConstInitVal: ConstInitVal = {
  <exp: ConstExp> => ConstInitVal::Exp(exp),
  "{" "}" => ConstInitVal::List(Vec::new()),
  "{" <initial0: ConstInitVal> <mut initial: ("," <ConstInitVal>)*> "}" => {
    initial.insert(0, initial0);
    ConstInitVal::List(initial)
  }
}

VarDecl: VarDecl = {
  "int" <def0: VarDef> <mut vardef: ("," <VarDef>)*> ";" => {
    vardef.insert(0, def0);
    VarDecl { item: vardef }
  }
}

VarDef: VarDef = {
  <ident: Ident> <dims: ("[" <ConstExp> "]")*> <initial: ("=" <InitVal>)?> => {
    VarDef { <> }
  },
}

InitVal: InitVal = {
  <exp: Exp> => InitVal::Exp(exp),
  "{" "}" => InitVal::List(Vec::new()),
  "{" <initial0: InitVal> <mut initial: ("," <InitVal>)*> "}" => {
    initial.insert(0, initial0);
    InitVal::List(initial)
  }
}

FuncDef: FuncDef = {
  "int" <ident: Ident> "(" <params: FuncFParams?> ")" <block: Block> => {
    FuncDef { 
      func_type: FuncType::Int,
      ident,
      params: params.unwrap_or(Vec::new()),
      block,
    }
  },
  "void" <ident: Ident> "(" <params: FuncFParams?> ")" <block: Block> => {
    FuncDef { 
      func_type: FuncType::Void,
      ident,
      params: params.unwrap_or(Vec::new()),
      block,
    }
  }
}

FuncFParams: Vec<FuncFParam> = {
  <param0: FuncFParam> <mut params: ("," <FuncFParam>)*> => {
    params.insert(0, param0);
    params
  }
}

FuncFParam: FuncFParam = {
  "int" <ident: Ident> <dims: ("[" "]" <("[" <ConstExp> "]")*> )?> => FuncFParam { <> },
}

Block: Block = "{" <item: BlockItem*> "}" => Block { <> };

BlockItem: BlockItem = {
  <decl: Decl> => BlockItem::Decl(decl),
  <stmt: Stmt> => BlockItem::Stmt(stmt),
}

Stmt: Stmt = {
  MStmt => <>,
  OStmt => <>,
}

MStmt: Stmt = {
  <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(Assign { <> }),
  <exp: Exp?> ";" => Stmt::ExpStmt(ExpStmt { <> }),
  <block: Block> => Stmt::Block(block),
  "if" "(" <cond: Exp> ")" <then_stmt: MStmt> "else" <else_stmt: MStmt> => {
    Stmt::If(Box::new(If { cond, then_stmt, else_stmt: Some(else_stmt) }))
  },
  "while" "(" <cond: Exp> ")" <stmt: MStmt> => {
    Stmt::While(Box::new(While { <> }))
  },
  "break" ";" => Stmt::Break(Break {}),
  "continue" ";" => Stmt::Continue(Continue {}),
  "return" <exp: Exp?> ";" => Stmt::Return(exp),
}

OStmt: Stmt = {
  "if" "(" <cond: Exp> ")" <then_stmt: Stmt> => {
    Stmt::If(Box::new(If { cond, then_stmt, else_stmt: None }))
  },
  "if" "(" <cond: Exp> ")" <then_stmt: MStmt> "else" <else_stmt: OStmt> => {
    Stmt::If(Box::new(If { cond, then_stmt, else_stmt: Some(else_stmt) }))
  },
  "while" "(" <cond: Exp> ")" <stmt: OStmt> => {
    Stmt::While(Box::new(While { <> }))
  },
}

Exp: Exp = LOrExp => <>; 

LVal: LVal = <ident: Ident> <indices: ("[" <Exp> "]")*> => LVal { <> };

PrimaryExp: Exp = {
  "(" <Exp> ")" => <>, 
  <lval: LVal> => Exp::LVal(lval),
  <number: Number> => Exp::Number(number),
}

Number: i32 = <num: IntConst> => <>;

UnaryExp: Exp = {
  PrimaryExp => <>,
  <ident: Ident> "(" <params: FuncRParams?> ")" => Exp::FuncCall(
    ident,
    params.unwrap_or(Vec::new()),
  ),
  "+" <UnaryExp> => <>,
  <unaryop: UnaryOp> <unaryexp: UnaryExp> => Exp::UnaryExp(
    unaryop,
    Box::new(unaryexp),
  )
}

FuncRParams: Vec<Exp> = {
  <exp0: Exp> <mut exps: ("," <Exp>)*> => {
    exps.insert(0, exp0);
    exps
  }
}

MulExp: Exp = {
  UnaryExp => <>,
  <mulexp: MulExp> <mulop: MulOp> <unaryexp: UnaryExp> => Exp::BinaryExp(
    Box::new(mulexp),
    mulop,
    Box::new(unaryexp),
  )
}

AddExp: Exp = {
  MulExp => <>,
  <addexp: AddExp> <addop: AddOp> <mulexp: MulExp> => Exp::BinaryExp(
    Box::new(addexp),
    addop,
    Box::new(mulexp),
  ),
}

RelExp: Exp = {
  AddExp => <>,
  <relexp: RelExp> <relop: RelOp> <addexp: AddExp> => Exp::BinaryExp(
    Box::new(relexp),
    relop,
    Box::new(addexp),
  ),
}

EqExp: Exp = {
  RelExp => <>,
  <eqexp: EqExp> <eqop: EqOp> <relexp: RelExp> => Exp::BinaryExp(
    Box::new(eqexp),
    eqop,
    Box::new(relexp),
  ),
}

LAndExp: Exp = {
  EqExp => <>,
  <landexp: LAndExp> "&&" <eqexp: EqExp> => Exp::BinaryExp(
    Box::new(landexp),
    BinaryOp::And,
    Box::new(eqexp),
  ),
}

LOrExp: Exp = {
  LAndExp => <>,
  <lorexp: LOrExp> "||" <landexp: LAndExp> => Exp::BinaryExp(
    Box::new(lorexp),
    BinaryOp::Or,
    Box::new(landexp),
  ),
}

ConstExp: ConstExp = <exp: Exp> => ConstExp { <> };

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}

UnaryOp: UnaryOp = {
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
}

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
}

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
}

RelOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  "<=" => BinaryOp::Le,
  ">" => BinaryOp::Gt,
  ">=" => BinaryOp::Ge,
}

EqOp: BinaryOp = {
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Neq,
}